set nocompatible number relativenumber nobomb wrap wrapmargin=79 linebreak
\ textwidth=79 cc=79 autoindent hi=50 ru so=3 nopaste sc wildmenu notimeout
\ nottimeout display=truncate mouse-=a bg=dark conceallevel=1 hlsearch is
\ showmatch ignorecase scs tabpagemax=15 noexpandtab shell=bash
\ encoding=UTF-8 scl=auto
\ lmap=ЙQ,ЦW,УE,КR,ЕT,НY,ГU,ШI,ЩO,ЗP,Х{,Ъ},ФA,ЫS,ВD,АF,ПG,РH,ОJ,ЛK,ДL,ЯZ
\ lmap+=ЧX,СC,МV,ИB,ТN,ЬM,Б<,Ю>,йq,цw,уe,кr,еt,нy,гu,шi,щo,зp,х[,ъ],фa,ыs
\ lmap+=вd,аf,пg,рh,оj,лk,дl,яz,чx,сc,мv,иb,тn,ьm
" set backspace=indent,eol,start
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
noremap <Insert> <Nop>
noremap <Del> <Nop>
noremap <BS> <Nop>
noremap <Home> <Nop>
noremap <End> <Nop>
noremap <PageUp> <Nop>
noremap <PageDown> <Nop>
noremap <F1> <Nop>
noremap <F2> <Nop>
noremap <F3> <Nop>
noremap <F4> <Nop>
noremap <F5> <Nop>
noremap <F6> <Nop>
noremap <F7> <Nop>
noremap <F8> <Nop>
noremap <F9> <Nop>
noremap <F10> <Nop>
noremap <F11> <Nop>
noremap <F12> <Nop>
vnoremap <Up> <Nop>
vnoremap <Down> <Nop>
vnoremap <Left> <Nop>
vnoremap <Right> <Nop>
vnoremap <Insert> <Nop>
vnoremap <Del> <Nop>
vnoremap <BS> <Nop>
vnoremap <Home> <Nop>
vnoremap <End> <Nop>
vnoremap <PageUp> <Nop>
vnoremap <PageDown> <Nop>
vnoremap <F1> <Nop>
vnoremap <F2> <Nop>
vnoremap <F3> <Nop>
vnoremap <F4> <Nop>
vnoremap <F5> <Nop>
vnoremap <F6> <Nop>
vnoremap <F7> <Nop>
vnoremap <F8> <Nop>
vnoremap <F9> <Nop>
vnoremap <F10> <Nop>
vnoremap <F11> <Nop>
vnoremap <F12> <Nop>
inoremap <Up> <Nop>
inoremap <Down> <Nop>
inoremap <Left> <Nop>
inoremap <Right> <Nop>
inoremap <Insert> <Nop>
inoremap <Del> <Nop>
inoremap <BS> <Nop>
inoremap <Home> <Nop>
inoremap <End> <Nop>
inoremap <PageUp> <Nop>
inoremap <PageDown> <Nop>
inoremap <F1> <Nop>
inoremap <F2> <Nop>
inoremap <F3> <Nop>
inoremap <F4> <Nop>
inoremap <F5> <Nop>
inoremap <F6> <Nop>
inoremap <F7> <Nop>
inoremap <F8> <Nop>
inoremap <F9> <Nop>
inoremap <F10> <Nop>
inoremap <F11> <Nop>
inoremap <F12> <Nop>
map Q gq
filetype detect
if &filetype == "html" || &filetype == "css"
	set ts=2 sw=2 nolinebreak cc=140 textwidth=140
elsei &filetype == "asm"
	set ts=8 sw=8 expandtab nolinebreak
elsei &filetype == "go"
	set nolinebreak
elsei &filetype == "haskell"
	set cc=75 textwidth=75 nolinebreak ts=2 sw=2 expandtab
endif

function PrepareBeforeWrite()
	if &filetype == "python"
		%s/^	/    /e
	endif
	%s/\s\+$//e
	%s/\^datetime\^/\=strftime("%c")/e
	set fileencoding=utf-8
endfunction


function StatuslineTrailingSpaceWarning()
	if !exists("b:statusline_trailing_space_warning")
		if !&modifiable
			let b:statusline_trailing_space_warning = ''
			return b:statusline_trailing_space_warning
		endif
		if search('\s\+$', 'nw') != 0
			let b:statusline_trailing_space_warning = '[\s]'
		else
			let b:statusline_trailing_space_warning = ''
		endif
	endif
	return b:statusline_trailing_space_warning
endfunction

function StatuslineCurrentHighlight()
	let name = synIDattr(synID(line('.'),col('.'), 1), 'name')
	if name == '' | return ''  | else | return '[' . name . ']' | endif
endfunction

function StatuslineLongLineWarning()
	if !exists("b:statusline_long_line_warning")
		if !&modifiable
			let b:statusline_long_line_warning = ''
			return b:statusline_long_line_warning
		endif
		let long_line_lens = s:LongLines()
		if len(long_line_lens) > 0
			let b:statusline_long_line_warning = "[" .
			\ '#' . len(long_line_lens) . "," .
			\ 'm' . s:Median(long_line_lens) . "," .
			\ '$' . max(long_line_lens) . "]"
		else
			let b:statusline_long_line_warning = ""
		endif
	endif
	return b:statusline_long_line_warning
endfunction

function s:LongLines()
	let threshold = (&tw ? &tw : 80)
	let spaces = repeat(" ", &ts)
	let long_line_lens = []
	let i = 1
	while i <= line("$")
		let len = strlen(substitute(getline(i), '\t', spaces, 'g'))
		if len > threshold
			call add(long_line_lens, len)
		endif
		let i += 1
	endwhile
	return long_line_lens
endfunction

function s:Median(nums)
	let nums = sort(a:nums)
	let l = len(nums)
	if l % 2 == 1
		let i = (l - 1) / 2
		return nums[i]
	else
		return nums[l / 2] + nums[(l / 2) - 1] / 2
	endif
endfunction

set ls=2
set stl=%-03.f%#warningmsg#%{&ff!='unix'?'['.&ff.']':''}%*%#warningmsg#
set stl+=%{(&fenc!='utf-8'&&&fenc!='')?'['.&fenc.']':''}%*%h%y%r%m
set stl+=%{StatuslineTrailingSpaceWarning()}
set stl+=%{StatuslineLongLineWarning()}
set stl+=%#warningmsg#%#error#%{&paste?'[paste]':''}%*
set stl+=%{StatuslineCurrentHighlight()}\ \%c,%l/%L\ %P
autocmd cursorhold,bufwritepost * unlet! b:statusline_trailing_space_warning
autocmd cursorhold,bufwritepost * unlet! b:statusline_long_line_warningS
autocmd StdinReadPre * let s:std_in=1
augroup PreWriteEdits
autocmd BufWritePre * call PrepareBeforeWrite()
augroup END
syntax on
